generator client {
  provider = "prisma-client"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(cuid())
  email      String       @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  connection Connection[]
  password   Password?
  profile    Profile?
  session    Session[]
}

model Password {
  hash   String
  userId String @id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Profile {
  id              String       @id @default(cuid())
  userId          String       @unique
  firstName       String
  lastName        String
  headline        String?
  city            String?
  region          String?
  country         String?
  roleType        RoleType     @default(FOH)
  currentPosition String?
  yearsExperience Int?
  skills          String[]
  certifications  String[]
  tags            String[]
  profileImageUrl String?
  bio             String?
  availability    Availability @default(NOT_AVAILABLE)
  isPublic        Boolean      @default(true)
  phone           String?
  emailPublic     Boolean      @default(false)
  phonePublic     Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([roleType, availability])
  @@index([city, region, country])
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Connection {
  id           String   @id @default(cuid())
  providerName String
  providerId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerName, providerId])
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  /// The type of verification, e.g. "email" or "phone"
  type      String
  /// The thing we're trying to verify, e.g. a user's email or phone number
  target    String
  /// The secret key used to generate the otp
  secret    String
  /// The algorithm used to generate the otp
  algorithm String
  /// The number of digits in the otp
  digits    Int
  /// The number of seconds the otp is valid for
  period    Int
  /// The valid characters for the otp
  charSet   String
  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

enum RoleType {
  FOH
  BOH
  BOTH
}

enum Availability {
  FULL_TIME
  PART_TIME
  FREELANCE
  NOT_AVAILABLE
}
